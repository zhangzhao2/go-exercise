package main

import "fmt"

/*
	interface(接口)是golang 最重要的一个特性之一，Interface类型可以定义一组方法。请注意:此处是限定一组方法，既然是方法，
就不能是变量;一组：表明可以有多个方法。interface是一种类型，确切的说是一种指针类型。
	interface是为实现多态功能，什么是多态：多态通俗讲允许将子类的指针赋值给父类类型指针。假如被人结婚发邀请函给你爸，实际上你去了，或者你妹
去了都可以。家人中一位都行，这就是多态。
多态又分为：编译时多态（比如重载），运行时多态（比如重写）
	封装：就是将代码模块化，你只需要关心传入参数和返回什么，实现细节不需要你关心。
	继承：扩展存在的代码模块，为了代码重用。
	那么多态除了代码的复用，还可以解耦。然而为什么要解耦？答:耦合度是模块之间，代码之间的关联度，通过对系统的分析将他们分解成一个个子模块
，子模块提供稳定的接口，达到降低耦合度的目的，模块之间尽量使用模块接口访问，而不是随意引用其他模块的成员变量。
	多态有两个好处：
	1.应用程序不必为每一个派生类编写功能调用，只需要对抽象基类进行处理即可。大大提高程序的可复用性。//继承
	2.派生类的功能可以被基类的方法或引用变量所调用，这叫向后兼容， 可以提高可扩充性和可维护性。//多态的真正作用
*/
//接口定义
/*type 接口名称 interface {
	method1(参数列表) 返回值列表
	method2(参数列表) 返回值列表
	...
	methodn(参数列表) 返回值列表
}
*/
func main() {
	var t1, t2 interface{}
	fmt.Println(t1==nil, t2==nil)

	t1, t2=100, 100
	fmt.Println(t1==t2)
	t1, t2= map[string]int{}, map[string]int{}
	fmt.Println(t1==t2)
}